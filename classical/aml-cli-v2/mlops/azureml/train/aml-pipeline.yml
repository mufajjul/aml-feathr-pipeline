$schema: https://azuremlschemas.azureedge.net/latest/pipelineJob.schema.json
type: pipeline
experiment_name: aml-demo-example
description: Training Pipeline to train a model that predicts taxi fare price

# <inputs_and_outputs>
# inputs:
  # input:
  #   type: uri_file
  #   path: azureml:taxi-data@latest
  # enable_monitoring: 'false'
  # table_name: 'taximonitoring'

outputs:
  train_data:
  val_data:
  test_data:
  trained_model:
  evaluation_output:
  model_info_output_path:
# </inputs_and_outputs>

# <jobs>
settings:
  default_datastore: azureml:workspaceblobstore
  default_compute: azureml:cpu-cluster
  continue_on_step_failure: false

jobs:

  # prep_data:
  #   name: prep_data
  #   display_name: prep-data
  #   code: ../../../data-science/src
  #   command: >-
  #     python prep.py
  #     --raw_data ${{inputs.raw_data}}
  #     --train_data ${{outputs.train_data}}
  #     --val_data ${{outputs.val_data}}
  #     --test_data ${{outputs.test_data}}
  #     --enable_monitoring ${{inputs.enable_monitoring}}
  #     --table_name ${{inputs.table_name}}
  #   environment: azureml:taxi-train-env@latest
  #   inputs:
  #     raw_data: ${{parent.inputs.input}}
  #     enable_monitoring: ${{parent.inputs.enable_monitoring}}
  #     table_name: ${{parent.inputs.table_name}}
  #   outputs:
  #     train_data: ${{parent.outputs.train_data}}
  #     val_data: ${{parent.outputs.val_data}}
  #     test_data: ${{parent.outputs.test_data}}
  
  # create_config:
  #   name: create_config
  #   display_name: create-config
  #   code: src 
  #   command: >-
  #     . variables.txt &&
  #     echo "Azure subscription ID: ${{inputs.AZURE_SUBSCRIPTION_ID}}" &&
  #     python create_aml_config.py 
  #     --subscription_id ${{inputs.AZURE_SUBSCRIPTION_ID}}
  #     --resource_group ${{inputs.RESOURCE_GROUP}}
  #     --workspace_name ${{inputs.AML_WORKSPACE_NAME}}
  #     --config_path ${{inputs.amlConfigPath}} &&
  #     ls
  #   environment: azureml:AzureML-sklearn-0.24-ubuntu18.04-py37-cpu@latest
  #   inputs:
  #     AZURE_SUBSCRIPTION_ID: ${{parent.inputs.AZURE_SUBSCRIPTION_ID}}
  #     RESOURCE_GROUP: ${{parent.inputs.RESOURCE_GROUP}}
  #     AML_WORKSPACE_NAME: ${{parent.inputs.AML_WORKSPACE_NAME}}
  #     amlConfigPath: ${{parent.inputs.amlConfigPath}}

  train_model:
    name: train_model
    display_name: train-model
    code: ../../../data-science/src
    # TODO: Change the variable workaround to something safer.
    command: >-
      #source variables.txt &&
      #rm variables.txt &&
      conda env create -n feathr-env --file environment/conda.yml &&
      eval "$(conda shell.bash hook)" &&  
      conda activate feathr-env &&
      echo "Environment active" &&
      pip install -r environment/requirements.txt --use-deprecated=legacy-resolver &&
      echo "Ready to train" &&
      python train.py
      --config_path 'aml_config.json'
      --data_path $ADLS_DATA_PATH
      --registered_model_name feathr-aml-demo
      --azure_tenant_id $AZURE_TENANT_ID
      --azure_client_id $AZURE_CLIENT_ID
      --azure_client_secret $AZURE_CLIENT_SECRET
      --adls_key $ADLS_KEY
    environment: azureml:AzureML-sklearn-0.24-ubuntu18.04-py37-cpu@latest
    # inputs:
    #   amlConfigPath: ${{parent.inputs.amlConfigPath}}
    # outputs:
    #   model_output: ${{parent.outputs.trained_model}}

  # evaluate_model:
  #   name: evaluate_model
  #   display_name: evaluate-model
  #   code: ../../../data-science/src
  #   command: >-
  #     python evaluate.py
  #     --model_name ${{inputs.model_name}}
  #     --model_input ${{inputs.model_input}}
  #     --test_data ${{inputs.test_data}}
  #     --evaluation_output ${{outputs.evaluation_output}}
  #   environment: azureml:taxi-train-env@latest
  #   inputs:
  #     model_name: "taxi-model"
  #     model_input: ${{parent.jobs.train_model.outputs.model_output}}
  #     test_data: ${{parent.jobs.prep_data.outputs.test_data}}
  #   outputs:
  #     evaluation_output: ${{parent.outputs.evaluation_output}}

  # register_model:
  #   name: register_model
  #   display_name: register-model
  #   code: ../../../data-science/src
  #   command: >-
  #     python register.py
  #     --model_name ${{inputs.model_name}}
  #     --model_path ${{inputs.model_path}}
  #     --evaluation_output ${{inputs.evaluation_output}}
  #     --model_info_output_path ${{outputs.model_info_output_path}}
  #   environment: azureml:taxi-train-env@latest
  #   inputs:
  #     model_name: "taxi-model"
  #     model_path: ${{parent.jobs.train_model.outputs.model_output}}
  #     evaluation_output: ${{parent.jobs.evaluate_model.outputs.evaluation_output}}
  #   outputs:
  #     model_info_output_path: ${{parent.outputs.model_info_output_path}}
# </jobs>

# $schema: https://azuremlschemas.azureedge.net/latest/commandJob.schema.json
# code: src
# command: >-
#   eval "$(conda shell.bash hook)"
#   conda activate feathr-env
#   echo "DataPath: $(DataPath)"
#   python train.py --data_path $(DataPath) --registered_model_name "Demo-model"
# environment: azureml:AzureML-sklearn-0.24-ubuntu18.04-py37-cpu@latest
# compute: azureml:cpu-cluster
# # inputs:
# #   data_path: 
# #     type: uri_file
# # Can pass conda.yml file
# # Need image name, can also tell to install additional packages through .yml file
# # environment: 'feathr-env'
# display_name: aml-demo-example
# experiment_name: aml-demo-example
# description: Train demo dataset.


# jobs:
# - job: A
#   steps:
#   # assume that MyTask generates an output variable called "MyVar"
#   # (you would learn that from the task's documentation)
#   - task: MyTask@1
#     name: ProduceVar  # because we're going to depend on it, we need to name the step
# - job: B
#   dependsOn: A
#   variables:
#     # map the output variable from A into this job
#     varFromA: $[ dependencies.A.outputs['ProduceVar.MyVar'] ]
#   steps:
#   - script: echo $(varFromA) # this step uses the mapped-in variable
